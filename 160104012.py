# -*- coding: utf-8 -*-
"""pat_rec_[2.2][assignment].ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11wjTeAl7WZGi4tIV-OUXI8acm0xf8IJQ
"""

'''
Course Name: Pattern Recognition Lab
Course Number: CSE 4214
Experiment no. 1: Designing a Minimum Distance to Class Mean Classifier

Name: Humaira Zahin Mauni
Section: A1
ID: 160104012
'''

import numpy as np
import pandas as pd
import io
import matplotlib.pyplot as plt
from google.colab import files

## Q1
uploaded = files.upload() #upload train.txt

df_train = pd.read_csv(io.BytesIO(uploaded['train.txt'] ), sep=" " ,  header = None, dtype = 'Int64')
df_train.columns = ['x', 'y', 'label']
print(df_train)

groups = df_train.groupby('label')

fig, ax = plt.subplots()
for name, group in groups:
    name = 'Train Class ' + str(name)
    ax.plot(group.x, group.y, marker='o', linestyle='', ms=12, label=name)
ax.legend()

plt.show()

#Q2
uploaded = files.upload()

df_test = pd.read_csv(io.BytesIO(uploaded['test.txt'] ), sep=" " ,  header = None, dtype = 'Int64')
X_train = df_train.iloc[:, 0:2].values
y_train = df_train.iloc[:, 2].values
y_train = y_train.astype('int')
X_test = df_test.iloc[:, 0:2].values
y_test = df_test.iloc[:, 2].values
y_test = y_test.astype('int')

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

lda = LDA(n_components=1)
X_train = lda.fit_transform(X_train, y_train)

y_pred = lda.predict(X_test)

df_test.columns = ['x', 'y', 'actual_label']

mean = df_train.groupby('label').mean()
print(mean)

df_test.columns = ['x', 'y', 'actual_label']
df_test['predicted label'] = y_pred
print(df_test)

####Q3

groups = df_train.groupby('label')
groups2 =  df_test.groupby('predicted label')
mean = df_train.groupby('label').mean()
x = np.arange(start=-4, stop=8, step=1)
m1 = mean.iloc[0]['x']-mean.iloc[1]['x']
m2 = mean.iloc[0]['y']-mean.iloc[1]['y']
c = -0.5* (((mean.iloc[0]['x']**2) + (mean.iloc[0]['y']**2)) - ((mean.iloc[1]['x']**2) + (mean.iloc[1]['y']**2)))
y = (-m1/m2)*x +c

# Plotting the results to Q2 and Q3
fig, ax = plt.subplots()
for name, group in groups:
    name = 'Train Class ' + str(name)
    ax.plot(group.x, group.y, marker='o', linestyle='', ms=12, label=name)
for name, group in groups2:
    name = 'Test Class ' + str(name)
    ax.plot(group.x, group.y, marker='x', linestyle='', ms=12, label=name)
ax.plot(mean.iloc[0]['x'], mean.iloc[0]['y'], 'sb', label='Mean Class 1')
ax.plot(mean.iloc[1]['x'], mean.iloc[1]['y'], 'sr', label='Mean Class 2')
ax.plot(x,y, ':', label = 'Decision Boundary')
ax.legend()

plt.show()

#####Q4
from sklearn.metrics import accuracy_score
print('Accuracy = ', accuracy_score(y_test, y_pred)*100, '%')